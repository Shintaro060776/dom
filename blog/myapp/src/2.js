import React from 'react';
import './2.css';

const BlogArticle2 = () => {
    return (
        <div className='App'>
            <img src='/blog/20231016_12_05_0.png' alt='second' className='header-image' />
            <div className='page-title'>
                <h1>機械学習を用いた実験的Webアプリケーションについて</h1>
            </div>
            <div className='page-date'>
                <p>2023/01/09</p>
            </div>
            <div className='paragraph'>
                <p>
                    実験サイトで作った、機械学習を用いたサービスの概要を、以下に記載します。<br /><br />

                    <span className="highlight">①動くヌコ</span><br /><br />
                    URL : http://neilaeden.com/predict/<br /><br />
                    アプリの概要：ユーザーがフォーム上に、ネコの絵を書いて、その書いた絵を、アニメーション(動かす)させるというWebアプリケーション<br /><br />
                    難易度：★★★★☆<br /><br />
                    雑感 : Web上に、なかなか手書きのネコの画像が無いから、完成度は、そこまで高くないかな。推論処理は動くし、エラーも出ていないから、ま、いいか、という感じ。
                    何故、ネコだけにしたかというと、ネコ以外の学習データ(犬、鳥、魚など)も取り入れると、機械学習(AI)サーバーの学習時間が増大して、費用が高くなるから、限定的にしたという経緯です。スマホで、フォームに絵を書けるけど、書きづらいから、PCのブラウザから、どうぞ

                    <br /><br /><span className="highlight">②Joke GPT</span><br /><br />
                    URL : http://neilaeden.com/natural/<br /><br />
                    アプリの概要 : ChatGPTの劣化版だと思っていて、ユーザーが入力フォーム(テキストエリア)に英単語を入力すると、機械学習(AI)サーバーが、英語でジョークを生成する<br /><br />
                    難易度：★★★★★<br /><br />
                    雑感：日本語でジョーク(シャレ)を生成したかったけど、Web上に、そういう感じのデータが無いから、日本語Versionは断念。しかし、英語だと、そういうデータがあったから、
                    トライしてみた。ただ、AIに学習させたデータ量は、そんなに多くないから、質はぼちぼち。機械学習(AI)サーバーから、レスポンス(ジョーク)が返ってくるから良しとした。

                    <br /><br /><span className="highlight">【その他】</span><br /><br />
                    アフターコロナ対策として、3年前ぐらいから、数学の勉強をしていて、高校の数学から着手したのだけど、これが完全にターニングポイントだったなと思いますね
                    AIは数学的な知見であるとか、知識が非常に重要で、何故ならAIは数式そのものだから。
                    当然、コーディング(プログラミング)スキルとか、環境(インフラとか)構築スキルとか、トラブルシューティング、エラーハンドリングとかも、重要やけど、
                    数学が一番カギを握る印象。とっくに、大学数学(微分積分学、線形代数学など)まで到達していて、来年は、もっとAIを理解する為に、家庭教師に、来てもらおうと思っている

                    <br /><br />あとは、学習させるデータ量が多ければ、当然、これらのwebアプリケーションのクオリティ(所望のリスポンス)は、余裕で上がる

                    <br /><br /><span className="highlight">①動くヌコ</span><br /><br />
                    ★フロントエンド(React)<br /><br />
                    キャンバス描画: ユーザーは、キャンバス上に絵を描けて、マウスやタッチイベントを利用することにより、描画機能を使えます。
                    画像のリサイズ: 描かれた画像は、サーバーに送信する前に、特定のサイズ(256x256ピクセル)に、リサイズします。
                    これは、サーバー側のモデルが、特定のサイズの入力を期待している為。
                    アニメーションの実行: サーバーからの応答に基づいて、特定のアニメーション(口が動く)が実行されます。これは、描かれた画像の内容によって、
                    異なるアニメーションを選択する為。<br /><br />

                    <span className="highlight">★AIについての説明</span><br /><br />
                    このアプリケーションで使用される、AIの主要部分は、画像を解析し、特定のラベルに分類するディープラーニングモデルで、CNN(Convolutional Neural Networks)というモデルは、
                    画像内のパターンや特徴を学習し、それを基に画像を、特定のカテゴリに分類します。このプロセスは、AIは大量のデータと、計算能力を用いて、実行します。

                    <br /><br /><span className="highlight">②Joke GPT</span><br /><br />
                    ★アプリケーションの概要：<br /><br />
                    このWebアプリケーションは、ユーザーインターフェース(フロントエンド)、バックエンドサービス、自然言語処理(NLP)サービスを統合して、ジョークを生成する
                    ロジックを組んでいます。<br /><br />

                    ★推論とジョークの生成<br /><br />
                    モデルのデプロイと推論: トレーニングされたモデルは、Webアプリケーションのバックエンド(AWS SageMaker)でデプロイされ、リアルタイムの推論リクエストに、応答します。
                    生成プロセス: ユーザーからの入力(一部の単語、または、フレーズ)に基づいて、モデルは続く単語を、一つずつ生成します。この過程で、モデルは以前の単語に基づいて、
                    次の単語を予測し、ジョークを形成します。<br /><br />

                    ★アプリケーションの概要<br /><br />
                    このアプリケーションは、ユーザーが描いた画像に基づいて、アニメーションを生成するもので。ユーザーは、キャンバスに絵を描き、その絵がサーバーに送信され、
                    特定のラベル(例えば「笑顔」や「怒り」など)に基づいて、フロント(React)側のコードにより、アニメーションが実行されるというロジックです。
                    以降は、各ポイントでの処理の内容を、記載します。<br /><br />

                    ★フロントエンド(React)<br /><br />
                    キャンバス描画: ユーザーは、キャンバス上に絵を描けて、マウスやタッチイベントを利用することにより、描画機能を使えます。
                    画像のリサイズ: 描かれた画像は、サーバーに送信する前に、特定のサイズ(256x256ピクセル)に、リサイズします。
                    これは、サーバー側のモデルが、特定のサイズの入力を期待している為。
                    アニメーションの実行: サーバーからの応答に基づいて、特定のアニメーション(口が動く)が実行されます。これは、描かれた画像の内容によって、
                    異なるアニメーションを選択する為。<br /><br />

                    ★バックエンド(AIと機械学習)<br /><br />
                    画像処理: サーバーは、ユーザーから受け取った画像を処理し、それをモデルに供給するために、前処理します。
                    モデル予測: 画像は、ディープラーニングモデル(CNN)に供給され、モデルは、画像の内容に基づいて、予測(ラベル)を行います。
                    応答の生成: モデルからの予測結果は、クライアントに送り返され、フロントエンドで適切なアニメーションを、トリガーします。

                    <br /><br />★AIについての説明<br /><br />
                    このアプリケーションで使用される、AIの主要部分は、画像を解析し、特定のラベルに分類するディープラーニングモデルで、CNN(Convolutional Neural Networks)というモデルは、
                    画像内のパターンや特徴を学習し、それを基に画像を、特定のカテゴリに分類します。このプロセスは、AIは大量のデータと、計算能力を用いて、実行します。
                    <br /><br />
                    ****************************************************************
                    <br /><br />
                    <span className="highlight">②Joke GPT</span><br /><br />
                    ★アプリケーションの概要：<br /><br />
                    このWebアプリケーションは、ユーザーインターフェース(フロントエンド)、バックエンドサービス、自然言語処理(NLP)サービスを統合して、ジョークを生成する
                    ロジックを組んでいます。<br /><br />

                    ★データの前処理<br /><br />
                    テキストの正規化: ジョークのデータセットを収集し、テキストを小文字に変換、特殊文字の削除、単語間の空白の整理などを行って、正規化します。
                    トークン化と語彙の構築: 正規化されたテキストを、単語単位に分割(トークン化)し、データセット全体の単語に基づいて、語彙(単語とインデックスのマッピング)を作成します。
                    <br /><br />
                    ★モデルのトレーニング<br /><br />
                    LSTMモデルの使用: LSTM(Long Short-Term Memory)ネットワークを使用し、ジョークの生成に必要な、シーケンシャルなパターンを学習する。
                    LSTMは時系列データや、テキストデータにおいて、長期的な依存関係を学習するのに適している。
                    シーケンスデータの準備: ジョークの各単語を、語彙のインデックスに変換し、それらをシーケンス(単語の連続)として、モデルに供給します。
                    ターゲットは、次に来る単語を予測すること。<br /><br />

                    ★推論とジョークの生成<br /><br />
                    モデルのデプロイと推論: トレーニングされたモデルは、Webアプリケーションのバックエンド(AWS SageMaker)でデプロイされ、リアルタイムの推論リクエストに、応答します。
                    生成プロセス: ユーザーからの入力(一部の単語、または、フレーズ)に基づいて、モデルは続く単語を、一つずつ生成します。この過程で、モデルは以前の単語に基づいて、
                    次の単語を予測し、ジョークを形成します。<br /><br />

                    ★ポストプロセッシング<br /><br />
                    生成されたテキストの調整: モデルによって生成されたテキストは、ポストプロセッシング(不適切な内容の除去、文法的な調整など)が、必要になる。

                    <br /><br />★ユーザーインターフェースとの統合<br /><br />
                    フロントエンド: Reactを、フロントエンドフレームワークとして使用して、ユーザーが入力したテキストを受け取り、生成されたジョークを表示する。
                    <br /><br />非同期通信: ユーザーからの入力を受け取り、バックエンドの推論サーバーに送信し、応答を受け取って、表示するプロセスは、非同期的に行われます。

                    <br /><br />上記が、このWebアプリケーションにおける、AI的な処理の、ロジックの概要で、ユーザーからの入力に基づいて、笑いのあるテキストを、生成するために、
                    <br /><br />自然言語処理の技術と、機械学習の手法によって、実装しています。
                </p>
            </div>
        </div>
    );
};

export default BlogArticle2;
