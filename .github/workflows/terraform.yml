name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1
  ECR_REGISTRY: 715573459931.dkr.ecr.ap-northeast-1.amazonaws.com
  ECR_REPOSITORY: next
  IMAGE_TAG: latest

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Check Out Repository
        uses: actions/checkout@v2

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1

      - name: 'Terraform Init'
        run: terraform init
        working-directory: terraform_configuration

      - name: 'Terraform Plan'
        run: terraform plan
        working-directory: terraform_configuration

      - name: 'Terraform Apply'
        run: terraform apply -auto-approve
        working-directory: terraform_configuration

  build-and-test:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v2

      - name: change to project directory
        run: |
          pwd
          ls -alh
          cd fluid
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Dependencies
        run: yarn install
        working-directory: fluid

      - name: Build
        run: yarn build
        working-directory: fluid



  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to Amazon ECR
        run: |
         aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      
      - name: Build, tag, and push image to Amazon ECR
        run: |
         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  update-ecs-task:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update ECS Task Definition
        run: |
          aws ecs register-task-definition --family "next-task" \
          --network-mode "awsvpc" \
          --requires-compatibilities "FARGATE" \
          --cpu "256" \
          --memory "512" \
          --execution-role-arn "arn:aws:iam::715573459931:role/ecsTaskExecutionRole" \
          --container-definitions '[{
          "name": "nginx-container",
          "image": "715573459931.dkr.ecr.ap-northeast-1.amazonaws.com/next:latest",
          "essential": true,
          "portMappings": [{ "containerPort": 80, "hostPort": 80 }],
          "memory": 512,
          "cpu": 256,
          "logConfiguration": {
          "logDriver": "awslogs",
          "options": {
          "awslogs-group": "/ecs/nginx-container",
          "awslogs-region": "ap-northeast-1",
          "awslogs-stream-prefix": "ecs"
          }
          }
          }]'

  update-ecs-service:
    needs: update-ecs-task
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        
      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster "next-cluster" --service "next-service" --task-definition "next-task"