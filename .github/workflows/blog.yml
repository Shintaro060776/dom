name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1
  ECR_REGISTRY: 715573459931.dkr.ecr.ap-northeast-1.amazonaws.com
  ECR_REPOSITORY: blog
  IMAGE_TAG: latest

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Check Out Repository
        uses: actions/checkout@v2

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1

      - name: 'Terraform Init'
        run: terraform init
        working-directory: terraform_blog

      - name: 'Terraform Plan'
        run: terraform plan
        working-directory: terraform_blog

      - name: 'Terraform Apply'
        run: terraform apply -auto-approve
        working-directory: terraform_blog

  build-and-push-react:
        needs: terraform
        runs-on: ubuntu-latest
        steps:
          - name: Check Out Repository
            uses: actions/checkout@v2
    
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v1
    
          - name: Login to Amazon ECR
            run: |
              aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

          - name: Build, tag, and push React image to Amazon ECR
            run: |
              cd /next/blog/myapp
              docker build -t $ECR_REGISTRY/$REACT_ECR_REPOSITORY:$REACT_IMAGE_TAG .
              docker push $ECR_REGISTRY/$REACT_ECR_REPOSITORY:$REACT_IMAGE_TAG
        
  build-and-push-node:
        needs: build-and-push-react
        runs-on: ubuntu-latest
        steps:
          - name: Check Out Repository
            uses: actions/checkout@v2
        
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v1
        
          - name: Login to Amazon ECR
            run: |
                aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
        
          - name: Build, tag, and push Node.js image to Amazon ECR
            run: |
                cd /next/blog_server
                docker build -t $ECR_REGISTRY/$NODE_ECR_REPOSITORY:$NODE_IMAGE_TAG .
                docker push $ECR_REGISTRY/$NODE_ECR_REPOSITORY:$NODE_IMAGE_TAG
        

  update-ecs-task:
    needs: build-and-push-node
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update ECS Task Definition
        run: |
            aws ecs register-task-definition --family "blog-task" \
            --network-mode "awsvpc" \
            --requires-compatibilities "FARGATE" \
            --cpu "256" \
            --memory "512" \
            --execution-role-arn "arn:aws:iam::715573459931:role/ecsTaskExecutionRole" \
            --container-definitions '[
            {
              "name": "blog-react-container",
              "image": "${{ env.ECR_REGISTRY }}/${{ env.REACT_ECR_REPOSITORY }}:${{ env.REACT_IMAGE_TAG }}",
              "essential": true,
              "portMappings": [{ "containerPort": 80, "hostPort": 80 }],
              "memory": 256,
              "cpu": 128
            },
            {
              "name": "blog-node-container",
              "image": "${{ env.ECR_REGISTRY }}/${{ env.NODE_ECR_REPOSITORY }}:${{ env.NODE_IMAGE_TAG }}",
              "essential": true,
              "portMappings": [{ "containerPort": 3000, "hostPort": 3000 }],
              "memory": 256,
              "cpu": 128
            }]'

  update-ecs-service:
    needs: update-ecs-task
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        
      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster "blog-cluster" --service "blog-react-service" --task-definition "blog-task"
          aws ecs update-service --cluster "blog-cluster" --service "blog-node-service" --task-definition "blog-task"
      